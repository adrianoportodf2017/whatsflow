// Flow WhatsApp - M√°fia Beer
// Parte 1: Tela Welcome com integra√ß√£o de API

const SCREEN_RESPONSES = {};

export const getNextScreen = async (decryptedBody) => {
  const { screen, data, action, user } = decryptedBody;

  const wa_id = user?.wa_id || "";
  const profile_name = user?.name || "";

  console.log("[M√°fia Beer Flow] A√ß√£o recebida:", action);
  console.log("[M√°fia Beer Flow] Tela atual:", screen);
  console.log("[M√°fia Beer Flow] Dados recebidos:", data);
  console.log("üç∫ Cliente:", wa_id, "-", profile_name);

  // Verifica√ß√£o de status
  if (action === "ping") {
    return { data: { status: "active" } };
  }

  // Inicializa√ß√£o do flow
  if (action === "INIT") {
    return await getWelcomeScreen();
  }

  // Processamento da tela Welcome
  if (action === "data_exchange" && screen === "WELCOME") {
    return await processWelcomeSelection(data);
  }

  // Fallback para tela inicial
  return await getWelcomeScreen();
};

// Fun√ß√£o para buscar e montar a tela WELCOME
async function getWelcomeScreen() {
  try {
    console.log("[M√°fia Beer] Carregando tela de boas-vindas...");

    // Aqui voc√™ pode buscar dados din√¢micos de uma API
    // Por enquanto, vou usar dados est√°ticos baseados no seu JSON
    const menuOptions = await getMenuOptions();

    return {
      screen: "WELCOME",
      data: {
        // Dados din√¢micos que ser√£o injetados no flow
        menu_options: menuOptions,
        version: "7.0",
        store_name: "M√°fia Beer",
        welcome_message: "üç∫ Bem-vindo √† M√°fia Beer! O que voc√™ deseja hoje?"
      }
    };

  } catch (error) {
    console.error("[M√°fia Beer] Erro ao carregar tela Welcome:", error);
    
    // Fallback com op√ß√µes est√°ticas
    return {
      screen: "WELCOME",
      data: {
        menu_options: [
          { "id": "growler", "title": "Pedir Growler (entrega r√°pida)" },
          { "id": "barrel", "title": "Pedir Barril (eventos)" },
          { "id": "pickup", "title": "Retirar em Ponto Parceiro" }
        ],
        welcome_message: "üç∫ Bem-vindo √† M√°fia Beer! O que voc√™ deseja hoje?"
      }
    };
  }
}

// Fun√ß√£o para buscar op√ß√µes do menu via API
async function getMenuOptions() {
  try {
    // Substitua pela URL da sua API
    const apiUrl = "https://sua-api-cervejaria.com/menu-options";
    
    const response = await fetch(apiUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        // Adicione headers de autentica√ß√£o se necess√°rio
        // "Authorization": "Bearer seu-token"
      }
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }

    const menuData = await response.json();
    
    console.log("[M√°fia Beer] Op√ß√µes do menu carregadas da API:", menuData);
    
    // Mapear resposta da API para o formato esperado pelo flow
    return menuData.options || [
      { "id": "growler", "title": "Pedir Growler (entrega r√°pida)" },
      { "id": "barrel", "title": "Pedir Barril (eventos)" },
      { "id": "pickup", "title": "Retirar em Ponto Parceiro" }
    ];

  } catch (error) {
    console.error("[M√°fia Beer] Erro ao buscar op√ß√µes da API:", error);
    
    // Retorna op√ß√µes padr√£o em caso de erro
    return [
      { "id": "growler", "title": "Pedir Growler (entrega r√°pida)" },
      { "id": "barrel", "title": "Pedir Barril (eventos)" },
      { "id": "pickup", "title": "Retirar em Ponto Parceiro" }
    ];
  }
}

// Fun√ß√£o para processar a sele√ß√£o feita na tela Welcome
async function processWelcomeSelection(data) {
  const selectedOption = data.main_menu;
  
  console.log("[M√°fia Beer] Op√ß√£o selecionada:", selectedOption);

  // Log dos dados do usu√°rio
  const userData = {
    wa_id: data.wa_id,
    profile_name: data.nome || data.profile_name,
    selected_service: selectedOption,
    timestamp: new Date().toISOString(),
    flow_version: "v1.0"
  };

  console.log("[M√°fia Beer] Dados do usu√°rio:", userData);

  // Determinar pr√≥xima tela baseado na sele√ß√£o
  switch (selectedOption) {
    case "growler":
      return {
        screen: "GROWLER_SELECTOR",
        data: {
          user_data: userData,
          service_type: "growler"
        }
      };

    case "barrel":
      return {
        screen: "BARREL_FORM", 
        data: {
          user_data: userData,
          service_type: "barrel"
        }
      };

    case "pickup":
      return {
        screen: "PICKUP_SELECTOR",
        data: {
          user_data: userData,
          service_type: "pickup"  
        }
      };

    default:
      console.log("[M√°fia Beer] Op√ß√£o inv√°lida, retornando para Welcome");
      return await getWelcomeScreen();
  }
}